from MathPi_Lexer import tokens
from collections import deque
import ply.yacc as yacc

symbols = []
sym_type = []
programInstructions = []
programCounter = 0
count = 0
hopsCounter = 0
itsALoop = 0
hopsCounterLoop = 0

# -----------------------------------~ YACC ~-----------------------------------

precedence = (
    ('right', 'ASSIGN'),
    ('left', 'NE'),
    ('left', 'LT', 'GT'),
    ('left', 'PLUS', 'MINUS'),
    ('left', 'TIMES', 'DIVIDE'),
    ('right', 'PARL'),
    ('left', 'PARR')
)


# -----------------------------------< GENERAL PROGRAM >-----------------------------------
def p_program(p):
    ''' program : PROGRAM COLON V P B END
    | PROGRAM COLON empty END'''
# --------------------------------< END OF GENERAL PROGRAM >--------------------------------


# -----------------------------------< VARIABLES >-----------------------------------
def p_V(p):
    ''' V : V VAR VM COLON TIPO
    | empty'''


def p_VM(p):
    ''' VM : ID VM2'''
    symbols.append(p[1])
    global count
    count += 1


def p_VM2(p):
    ''' VM2 : COMMA ID VM2'''
    symbols.append(p[2])
    global count
    count += 1


def p_VM2_empty(p):
    '''VM2 : empty'''


# +++++++++++++++ / VARIABLE TYPE \ +++++++++++++++
def p_TIPO(p):
    ''' TIPO : FLOAT
    | INT
    | ARRAY
    | MATRIX
    | CUBE'''
    global count
    for i in range(count):
        sym_type.append(p[1])
    count = 0

# -----------------------------------< END OF VARIABLES >-----------------------------------


# -----------------------------------< PROCEDURES >-----------------------------------
def p_P(p):
    ''' P : P PROCEDURE ID COLON B ENDP'''
    symbols.append(p[3])
    sym_type.append("PROCEDURE")


def p_P_empty(p):
    ''' P : empty'''

# -----------------------------------< END OF PROCEDURES >-----------------------------------


# ------------------------------< MAIN PROGRAM or INTERMADIATE CODE >------------------------------
def p_B(p):
    ''' B : BEGIN COLON ST '''


def p_ST(p):
    ''' ST : S ST
    | empty'''
# ---------------------------< END OF MAIN PROGRAM or INTERMADIATE CODE >---------------------------


# -----------------------------------< STATEMENTS >-----------------------------------
def p_S(p):
    ''' S : FOR ID IN ID COLON ST ENDF
    | DO COLON ST DWHILE COLON CONDITION ENDDO
    | GOSUB ID
    '''


# +++++++++++++++ / PRINT MANAGEMENT \ +++++++++++++++
def p_S_PRINT(p):
    '''S : PRINT PARL SID PARR'''


def p_SID(p):
    '''SID : STRING SID2
    | VMC SID2'''


def p_SID2(p):
    '''SID2 : PLUS VMC SID2
    | PLUS STRING SID2
    | empty'''


# To accept arrays, cubes and ID alone
def p_VMC(p):
    '''VMC : ID
    | ID SQBL CMP SQBR SQBL CMP SQBR
    | ID SQBL CMP SQBR SQBL CMP SQBR SQBL CMP SQBR'''


def p_CMP(p):
    '''CMP : NUMBER
    | ID'''


# +++++++++++++++ / INPUT MANAGEMENT \ +++++++++++++++
def p_S_INPUT(p):
    '''S : INPUT PARL IID PARR'''


def p_IID(p):
    '''IID : VMC IID2'''


def p_IID2(p):
    '''IID2 : COMMA VMC  IID2
    | empty'''


# +++++++++++++++++++++/ ASSIGN OR UPDATE MANAGEMENT \++++++++++++++++++++++
'''
	E->E+-T; E->T; T->T*/F; T->F; F->id; F->(E)
'''


def p_S_ASSIGN(p):
    ''' S : VMC ASSIGN UPDATE'''


def p_update(p):
    '''UPDATE : T '''


def p_update2(p):
    '''UPDATE : UPDATE PLUS T
    | UPDATE MINUS T
    | UPDATE OR T'''
    quadrupleGeneration(p[2])


def p_T(p):
    '''T : F'''


def p_T2(p):
    '''T : T TIMES F
    | T DIVIDE F
    | T AND F
    '''
    quadrupleGeneration(p[2])


def p_F(p):
    '''F : ID'''
    try:
        operandsStack.append(symbols.index(p[1]))
        operandsStack[-1] = '-' + str(operandsStack[-1])
        typeStack.append(sym_type[symbols.index(p[1])])
    except:
        print("Variable not declared yet")


def p_F_NUMBER(p):
    '''F : NUMBER'''
    operandsStack.append(p[1])


def p_FtoE(p):
    '''F : PARL CONDITION PARR'''


# +++++++++++++++++++++/ IF MANAGEMENT \++++++++++++++++++++++
ifQuadruples = []
itsAnIf = 0


def p_S_IF(p):
    '''S : IF AUXIF CONDITION AUXCOLON ST IFNOT ENDIF'''


# Auxiliar to set if flag to on to save if quadrules in its stack
def p_AUXIF(p):
    '''AUXIF : empty'''
    global itsAnIf
    itsAnIf = 1


# Generate ELSE statement
def p_IFNOT(p):
    ''' IFNOT : ELSE COLON AUXQ ST AUXEND'''
    global itsAnIf
    itsAnIf = 0


def p_IFNOT_empty(p):
    ''' IFNOT : empty'''
    aux = ifQuadruples[hopsCounter - 2].find(' - ')
    ifQuadruples[hopsCounter - 2] = ifQuadruples[hopsCounter - 2][0:aux + 1] + str(hopsCounter)
    global itsAnIf
    itsAnIf = 0


# AUX to adjus ifQuadrule stack and insert the Go to after the true statements
def p_AUXQ(p):
    '''AUXQ : empty'''
    global hopsCounter
    ifQuadruples.append("GoTo ")
    hopsCounter += 1
    aux = ifQuadruples[hopsCounter - 3].find(' - ')
    ifQuadruples[hopsCounter - 3] = ifQuadruples[hopsCounter - 3][0:aux + 1] + str(hopsCounter)


def p_AUXEND(p):
    '''AUXEND : empty'''
    aux = ifQuadruples.index('GoTo ')
    ifQuadruples[aux] = 'GoTo ' + str(hopsCounter)


# +++++++++++++++++++++/ WHILE MANAGEMENT \++++++++++++++++++++++
def p_S_WHILE(p):
    ''' S : WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW'''


def p_AUXWHILE(p):
    '''AUXWHILE : empty'''
    firstInstructionCondition.append(programCounter)

def p_AUXENDWHILE(p):
    '''AUXENDWHILE : empty'''
    global programCounter
    programInstructions.append('Go to ' + str(firstInstructionCondition.pop()))
    programCounter += 1

    aux = goToFPosition.pop()
    aux2 = programInstructions[aux].find(' - ')
    programInstructions[aux] = programInstructions[aux][0:aux2 + 1] + str(programCounter)

# +++++++++++++++++++++/ Type Translation \++++++++++++++++++++++
'''
    PENDING SECTION TO REVIEW
'''


def translateType(x, y, operand):
    if operand == '+' or operand == '-' or operand == '*':
        if x == y:
            return x


# +++++++++++++++++++++/ QUADRUPLES DEFINITION \++++++++++++++++++++++
# Quadruples stacks variables
operandsStack = deque()
executionQueue = []  # List to store quadruples
availTemporales = deque(['T1'])
availAux = []
typeStack = deque()
iAvail = 2  # Execution index


# Looking for existing avails
def existingAvail(value):
    try:
        availAux.index(value)
        availTemporales.append(value)
        availAux.remove(value)
    except:
        pass

def quadrupleGeneration(operator):
    global iAvail
    executionQueue.append(operator)
    # Operands
    auxOperand = operandsStack.pop()
    executionQueue.append(operandsStack.pop())

    existingAvail(executionQueue[-1])  # Operand equal to a temporal

    executionQueue.append(auxOperand)

    existingAvail(executionQueue[-1])  # Operand equal to a temporal

    operandsStack.append(availTemporales.popleft())
    executionQueue.append(operandsStack[-1])
    availAux.append(operandsStack[-1])
    availTemporales.append('T' + str(iAvail))  # New temporal
    iAvail += 1

    #print(executionQueue)
    if itsAnIf == 1:
        global hopsCounter
        ifQuadruples.append(executionQueue[:])
        hopsCounter += 1
    else:
        global programCounter
        programInstructions.append(executionQueue[:])
        programCounter += 1
    executionQueue.clear()


# +++++++++++++++++++++/ CONDITION MANAGEMENT \++++++++++++++++++++++
firstInstructionCondition = []
goToFPosition = []


def p_CONDITION(p):
    '''CONDITION : UPDATE'''


def p_CONDITION2(p):
    '''CONDITION : UPDATE NE UPDATE
    | UPDATE GT UPDATE
    | UPDATE LT UPDATE
    | UPDATE EQ UPDATE'''
    if itsAnIf == 1:
        quadrupleGeneration(p[2])
    quadrupleGeneration(p[2])


# +++++++++++++++++++++/ AUXCOLON MANAGEMENT \++++++++++++++++++++++
def p_AUXCOLON(p):
    '''AUXCOLON : COLON'''
    go2F()


def go2F():
    global hopsCounter, programCounter
    if itsAnIf == 1:
        ifQuadruples.append("GoToF " + str(ifQuadruples[-1][-1]) + " - " + str(len(ifQuadruples)))
        hopsCounter += 1
    else:
        programInstructions.append("GoToF " + str(programInstructions[-1][-1]) + " - ")
        goToFPosition.append(programCounter)
        programCounter += 1


# ---------------------------------< END STATEMENTS >---------------------------------


def p_empty(p):
    ''' empty :	'''
    pass

# THROWING ERROR
def p_error(p):
    print("\tSyntax error in line " + str(p.lineno))


parser = yacc.yacc()
f = open("CodigoIntermedio2.txt", "r")
parser.parse(f.read())

print(programInstructions)
#print("Tabla de simbolos" + str(symbols))
# print("Cuadruplos del if:")
#print(ifQuadruples)
print(symbols)

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    SQBL
    SQBR
    newline

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM COLON V MAIN P B END
Rule 2     MAIN -> empty
Rule 3     V -> V VAR VM COLON TIPO
Rule 4     V -> empty
Rule 5     VM -> ID VM2
Rule 6     VM -> ID SQBL NUMBER SQBR VM2
Rule 7     VM -> ID SQBL NUMBER COMMA NUMBER SQBR VM2
Rule 8     VM -> ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
Rule 9     VM2 -> COMMA ID VM2
Rule 10    VM2 -> COMMA ID SQBL NUMBER SQBR VM2
Rule 11    VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
Rule 12    VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
Rule 13    VM2 -> empty
Rule 14    TIPO -> FLOAT
Rule 15    TIPO -> INT
Rule 16    TIPO -> ARRAY_INT
Rule 17    TIPO -> ARRAY_FLOAT
Rule 18    TIPO -> MATRIX_INT
Rule 19    TIPO -> MATRIX_FLOAT
Rule 20    TIPO -> CUBE_INT
Rule 21    TIPO -> CUBE_FLOAT
Rule 22    TIPO -> BOOL
Rule 23    P -> P AUXPOSP PROCEDURE ID COLON B ENDP
Rule 24    P -> empty
Rule 25    AUXPOSP -> empty
Rule 26    B -> BEGIN COLON ST
Rule 27    ST -> S ST
Rule 28    ST -> empty
Rule 29    S -> FOR ID IN ID COLON ST ENDF
Rule 30    S -> DO COLON ST DWHILE COLON CONDITION ENDDO
Rule 31    S -> GOSUB ID
Rule 32    S -> PRINT PARL SID PARR
Rule 33    SID -> SID PLUS SID_T
Rule 34    SID -> SID_T
Rule 35    SID_T -> STRING
Rule 36    SID_T -> ID
Rule 37    SID -> empty
Rule 38    S -> INPUT PARL ID PARR
Rule 39    S -> INPUT PARL ID SQBL IDNUM SQBR PARR
Rule 40    S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
Rule 41    S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
Rule 42    IDNUM -> ID
Rule 43    IDNUM -> NUMBER
Rule 44    S -> VAMC ASSIGN UPDATE
Rule 45    UPDATE -> T
Rule 46    UPDATE -> UPDATE PLUS T
Rule 47    UPDATE -> UPDATE MINUS T
Rule 48    UPDATE -> UPDATE OR T
Rule 49    T -> F
Rule 50    T -> T TIMES F
Rule 51    T -> T DIVIDE F
Rule 52    T -> T AND F
Rule 53    F -> ID
Rule 54    F -> ID SQBL IDNUM SQBR
Rule 55    F -> ID SQBL IDNUM COMMA IDNUM SQBR
Rule 56    F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
Rule 57    F -> NUMBER
Rule 58    F -> PARL CONDITION PARR
Rule 59    VAMC -> ID
Rule 60    VAMC -> ID SQBL IDNUM SQBR
Rule 61    VAMC -> ID SQBL IDNUM COMMA IDNUM SQBR
Rule 62    VAMC -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
Rule 63    S -> IF CONDITION AUXCOLON ST ENDIF
Rule 64    S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
Rule 65    AUXQ -> empty
Rule 66    AUXENDIF -> empty
Rule 67    S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
Rule 68    AUXWHILE -> empty
Rule 69    AUXENDWHILE -> empty
Rule 70    CONDITION -> UPDATE
Rule 71    CONDITION -> UPDATE NE UPDATE
Rule 72    CONDITION -> UPDATE GT UPDATE
Rule 73    CONDITION -> UPDATE LT UPDATE
Rule 74    CONDITION -> UPDATE EQ UPDATE
Rule 75    AUXCOLON -> COLON
Rule 76    empty -> <empty>

Terminals, with rules where they appear

AND                  : 52
ARRAY_FLOAT          : 17
ARRAY_INT            : 16
ASSIGN               : 44
BEGIN                : 26
BOOL                 : 22
COLON                : 1 3 23 26 29 30 30 64 75
COMMA                : 7 8 8 9 10 11 11 12 12 12 40 41 41 55 56 56 61 62 62
COMMENT              : 
CUBE_FLOAT           : 21
CUBE_INT             : 20
DIVIDE               : 51
DO                   : 30
DOT                  : 
DWHILE               : 30
ELSE                 : 64
END                  : 1
ENDDO                : 30
ENDF                 : 29
ENDIF                : 63 64
ENDP                 : 23
ENDW                 : 67
EQ                   : 74
FLOAT                : 14
FOR                  : 29
GOSUB                : 31
GT                   : 72
ID                   : 5 6 7 8 9 10 11 12 23 29 29 31 36 38 39 40 41 42 53 54 55 56 59 60 61 62
IF                   : 63 64
IN                   : 29
INPUT                : 38 39 40 41
INT                  : 15
LT                   : 73
MATRIX_FLOAT         : 19
MATRIX_INT           : 18
MINUS                : 47
NE                   : 71
NUMBER               : 6 7 7 8 8 8 10 11 11 12 12 12 43 57
OR                   : 48
PARL                 : 32 38 39 40 41 58
PARR                 : 32 38 39 40 41 58
PLUS                 : 33 46
PRINT                : 32
PROCEDURE            : 23
PROGRAM              : 1
SQBL                 : 6 7 8 10 11 12 39 40 41 54 55 56 60 61 62
SQBR                 : 6 7 8 10 11 12 39 40 41 54 55 56 60 61 62
STRING               : 35
TIMES                : 50
VAR                  : 3
WHILE                : 67
error                : 
newline              : 

Nonterminals, with rules where they appear

AUXCOLON             : 63 64 67
AUXENDIF             : 64
AUXENDWHILE          : 67
AUXPOSP              : 23
AUXQ                 : 64
AUXWHILE             : 67
B                    : 1 23
CONDITION            : 30 58 63 64 67
F                    : 49 50 51 52
IDNUM                : 39 40 40 41 41 41 54 55 55 56 56 56 60 61 61 62 62 62
MAIN                 : 1
P                    : 1 23
S                    : 27
SID                  : 32 33
SID_T                : 33 34
ST                   : 26 27 29 30 63 64 64 67
T                    : 45 46 47 48 50 51 52
TIPO                 : 3
UPDATE               : 44 46 47 48 70 71 71 72 72 73 73 74 74
V                    : 1 3
VAMC                 : 44
VM                   : 3
VM2                  : 5 6 7 8 9 10 11 12
empty                : 2 4 13 24 25 28 37 65 66 68 69
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM COLON V MAIN P B END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . COLON V MAIN P B END

    COLON           shift and go to state 3


state 3

    (1) program -> PROGRAM COLON . V MAIN P B END
    (3) V -> . V VAR VM COLON TIPO
    (4) V -> . empty
    (76) empty -> .

    VAR             reduce using rule 76 (empty -> .)
    BEGIN           reduce using rule 76 (empty -> .)
    PROCEDURE       reduce using rule 76 (empty -> .)

    V                              shift and go to state 4
    empty                          shift and go to state 5

state 4

    (1) program -> PROGRAM COLON V . MAIN P B END
    (3) V -> V . VAR VM COLON TIPO
    (2) MAIN -> . empty
    (76) empty -> .

    VAR             shift and go to state 7
    BEGIN           reduce using rule 76 (empty -> .)
    PROCEDURE       reduce using rule 76 (empty -> .)

    MAIN                           shift and go to state 6
    empty                          shift and go to state 8

state 5

    (4) V -> empty .

    VAR             reduce using rule 4 (V -> empty .)
    BEGIN           reduce using rule 4 (V -> empty .)
    PROCEDURE       reduce using rule 4 (V -> empty .)


state 6

    (1) program -> PROGRAM COLON V MAIN . P B END
    (23) P -> . P AUXPOSP PROCEDURE ID COLON B ENDP
    (24) P -> . empty
    (76) empty -> .

    BEGIN           reduce using rule 76 (empty -> .)
    PROCEDURE       reduce using rule 76 (empty -> .)

    P                              shift and go to state 9
    empty                          shift and go to state 10

state 7

    (3) V -> V VAR . VM COLON TIPO
    (5) VM -> . ID VM2
    (6) VM -> . ID SQBL NUMBER SQBR VM2
    (7) VM -> . ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (8) VM -> . ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2

    ID              shift and go to state 12

    VM                             shift and go to state 11

state 8

    (2) MAIN -> empty .

    BEGIN           reduce using rule 2 (MAIN -> empty .)
    PROCEDURE       reduce using rule 2 (MAIN -> empty .)


state 9

    (1) program -> PROGRAM COLON V MAIN P . B END
    (23) P -> P . AUXPOSP PROCEDURE ID COLON B ENDP
    (26) B -> . BEGIN COLON ST
    (25) AUXPOSP -> . empty
    (76) empty -> .

    BEGIN           shift and go to state 15
    PROCEDURE       reduce using rule 76 (empty -> .)

    B                              shift and go to state 13
    AUXPOSP                        shift and go to state 14
    empty                          shift and go to state 16

state 10

    (24) P -> empty .

    BEGIN           reduce using rule 24 (P -> empty .)
    PROCEDURE       reduce using rule 24 (P -> empty .)


state 11

    (3) V -> V VAR VM . COLON TIPO

    COLON           shift and go to state 17


state 12

    (5) VM -> ID . VM2
    (6) VM -> ID . SQBL NUMBER SQBR VM2
    (7) VM -> ID . SQBL NUMBER COMMA NUMBER SQBR VM2
    (8) VM -> ID . SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    SQBL            shift and go to state 19
    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 18
    empty                          shift and go to state 21

state 13

    (1) program -> PROGRAM COLON V MAIN P B . END

    END             shift and go to state 22


state 14

    (23) P -> P AUXPOSP . PROCEDURE ID COLON B ENDP

    PROCEDURE       shift and go to state 23


state 15

    (26) B -> BEGIN . COLON ST

    COLON           shift and go to state 24


state 16

    (25) AUXPOSP -> empty .

    PROCEDURE       reduce using rule 25 (AUXPOSP -> empty .)


state 17

    (3) V -> V VAR VM COLON . TIPO
    (14) TIPO -> . FLOAT
    (15) TIPO -> . INT
    (16) TIPO -> . ARRAY_INT
    (17) TIPO -> . ARRAY_FLOAT
    (18) TIPO -> . MATRIX_INT
    (19) TIPO -> . MATRIX_FLOAT
    (20) TIPO -> . CUBE_INT
    (21) TIPO -> . CUBE_FLOAT
    (22) TIPO -> . BOOL

    FLOAT           shift and go to state 26
    INT             shift and go to state 27
    ARRAY_INT       shift and go to state 28
    ARRAY_FLOAT     shift and go to state 29
    MATRIX_INT      shift and go to state 30
    MATRIX_FLOAT    shift and go to state 31
    CUBE_INT        shift and go to state 32
    CUBE_FLOAT      shift and go to state 33
    BOOL            shift and go to state 34

    TIPO                           shift and go to state 25

state 18

    (5) VM -> ID VM2 .

    COLON           reduce using rule 5 (VM -> ID VM2 .)


state 19

    (6) VM -> ID SQBL . NUMBER SQBR VM2
    (7) VM -> ID SQBL . NUMBER COMMA NUMBER SQBR VM2
    (8) VM -> ID SQBL . NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2

    NUMBER          shift and go to state 35


state 20

    (9) VM2 -> COMMA . ID VM2
    (10) VM2 -> COMMA . ID SQBL NUMBER SQBR VM2
    (11) VM2 -> COMMA . ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> COMMA . ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2

    ID              shift and go to state 36


state 21

    (13) VM2 -> empty .

    COLON           reduce using rule 13 (VM2 -> empty .)


state 22

    (1) program -> PROGRAM COLON V MAIN P B END .

    $end            reduce using rule 1 (program -> PROGRAM COLON V MAIN P B END .)


state 23

    (23) P -> P AUXPOSP PROCEDURE . ID COLON B ENDP

    ID              shift and go to state 37


state 24

    (26) B -> BEGIN COLON . ST
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    END             reduce using rule 76 (empty -> .)
    ENDP            reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    ST                             shift and go to state 38
    S                              shift and go to state 39
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 25

    (3) V -> V VAR VM COLON TIPO .

    VAR             reduce using rule 3 (V -> V VAR VM COLON TIPO .)
    BEGIN           reduce using rule 3 (V -> V VAR VM COLON TIPO .)
    PROCEDURE       reduce using rule 3 (V -> V VAR VM COLON TIPO .)


state 26

    (14) TIPO -> FLOAT .

    VAR             reduce using rule 14 (TIPO -> FLOAT .)
    BEGIN           reduce using rule 14 (TIPO -> FLOAT .)
    PROCEDURE       reduce using rule 14 (TIPO -> FLOAT .)


state 27

    (15) TIPO -> INT .

    VAR             reduce using rule 15 (TIPO -> INT .)
    BEGIN           reduce using rule 15 (TIPO -> INT .)
    PROCEDURE       reduce using rule 15 (TIPO -> INT .)


state 28

    (16) TIPO -> ARRAY_INT .

    VAR             reduce using rule 16 (TIPO -> ARRAY_INT .)
    BEGIN           reduce using rule 16 (TIPO -> ARRAY_INT .)
    PROCEDURE       reduce using rule 16 (TIPO -> ARRAY_INT .)


state 29

    (17) TIPO -> ARRAY_FLOAT .

    VAR             reduce using rule 17 (TIPO -> ARRAY_FLOAT .)
    BEGIN           reduce using rule 17 (TIPO -> ARRAY_FLOAT .)
    PROCEDURE       reduce using rule 17 (TIPO -> ARRAY_FLOAT .)


state 30

    (18) TIPO -> MATRIX_INT .

    VAR             reduce using rule 18 (TIPO -> MATRIX_INT .)
    BEGIN           reduce using rule 18 (TIPO -> MATRIX_INT .)
    PROCEDURE       reduce using rule 18 (TIPO -> MATRIX_INT .)


state 31

    (19) TIPO -> MATRIX_FLOAT .

    VAR             reduce using rule 19 (TIPO -> MATRIX_FLOAT .)
    BEGIN           reduce using rule 19 (TIPO -> MATRIX_FLOAT .)
    PROCEDURE       reduce using rule 19 (TIPO -> MATRIX_FLOAT .)


state 32

    (20) TIPO -> CUBE_INT .

    VAR             reduce using rule 20 (TIPO -> CUBE_INT .)
    BEGIN           reduce using rule 20 (TIPO -> CUBE_INT .)
    PROCEDURE       reduce using rule 20 (TIPO -> CUBE_INT .)


state 33

    (21) TIPO -> CUBE_FLOAT .

    VAR             reduce using rule 21 (TIPO -> CUBE_FLOAT .)
    BEGIN           reduce using rule 21 (TIPO -> CUBE_FLOAT .)
    PROCEDURE       reduce using rule 21 (TIPO -> CUBE_FLOAT .)


state 34

    (22) TIPO -> BOOL .

    VAR             reduce using rule 22 (TIPO -> BOOL .)
    BEGIN           reduce using rule 22 (TIPO -> BOOL .)
    PROCEDURE       reduce using rule 22 (TIPO -> BOOL .)


state 35

    (6) VM -> ID SQBL NUMBER . SQBR VM2
    (7) VM -> ID SQBL NUMBER . COMMA NUMBER SQBR VM2
    (8) VM -> ID SQBL NUMBER . COMMA NUMBER COMMA NUMBER SQBR VM2

    SQBR            shift and go to state 50
    COMMA           shift and go to state 51


state 36

    (9) VM2 -> COMMA ID . VM2
    (10) VM2 -> COMMA ID . SQBL NUMBER SQBR VM2
    (11) VM2 -> COMMA ID . SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> COMMA ID . SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    SQBL            shift and go to state 53
    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 52
    empty                          shift and go to state 21

state 37

    (23) P -> P AUXPOSP PROCEDURE ID . COLON B ENDP

    COLON           shift and go to state 54


state 38

    (26) B -> BEGIN COLON ST .

    END             reduce using rule 26 (B -> BEGIN COLON ST .)
    ENDP            reduce using rule 26 (B -> BEGIN COLON ST .)


state 39

    (27) ST -> S . ST
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    END             reduce using rule 76 (empty -> .)
    ENDP            reduce using rule 76 (empty -> .)
    DWHILE          reduce using rule 76 (empty -> .)
    ENDIF           reduce using rule 76 (empty -> .)
    ELSE            reduce using rule 76 (empty -> .)
    ENDW            reduce using rule 76 (empty -> .)
    ENDF            reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    S                              shift and go to state 39
    ST                             shift and go to state 55
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 40

    (28) ST -> empty .

    END             reduce using rule 28 (ST -> empty .)
    ENDP            reduce using rule 28 (ST -> empty .)
    DWHILE          reduce using rule 28 (ST -> empty .)
    ENDIF           reduce using rule 28 (ST -> empty .)
    ELSE            reduce using rule 28 (ST -> empty .)
    ENDW            reduce using rule 28 (ST -> empty .)
    ENDF            reduce using rule 28 (ST -> empty .)


state 41

    (29) S -> FOR . ID IN ID COLON ST ENDF

    ID              shift and go to state 56


state 42

    (59) VAMC -> ID .
    (60) VAMC -> ID . SQBL IDNUM SQBR
    (61) VAMC -> ID . SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> ID . SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    ASSIGN          reduce using rule 59 (VAMC -> ID .)
    SQBL            shift and go to state 57


state 43

    (30) S -> DO . COLON ST DWHILE COLON CONDITION ENDDO

    COLON           shift and go to state 58


state 44

    (31) S -> GOSUB . ID

    ID              shift and go to state 59


state 45

    (32) S -> PRINT . PARL SID PARR

    PARL            shift and go to state 60


state 46

    (38) S -> INPUT . PARL ID PARR
    (39) S -> INPUT . PARL ID SQBL IDNUM SQBR PARR
    (40) S -> INPUT . PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> INPUT . PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR

    PARL            shift and go to state 61


state 47

    (44) S -> VAMC . ASSIGN UPDATE

    ASSIGN          shift and go to state 62


state 48

    (63) S -> IF . CONDITION AUXCOLON ST ENDIF
    (64) S -> IF . CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (70) CONDITION -> . UPDATE
    (71) CONDITION -> . UPDATE NE UPDATE
    (72) CONDITION -> . UPDATE GT UPDATE
    (73) CONDITION -> . UPDATE LT UPDATE
    (74) CONDITION -> . UPDATE EQ UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    CONDITION                      shift and go to state 63
    UPDATE                         shift and go to state 64
    T                              shift and go to state 65
    F                              shift and go to state 66

state 49

    (67) S -> WHILE . AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (68) AUXWHILE -> . empty
    (76) empty -> .

    ID              reduce using rule 76 (empty -> .)
    NUMBER          reduce using rule 76 (empty -> .)
    PARL            reduce using rule 76 (empty -> .)

    AUXWHILE                       shift and go to state 70
    empty                          shift and go to state 71

state 50

    (6) VM -> ID SQBL NUMBER SQBR . VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 72
    empty                          shift and go to state 21

state 51

    (7) VM -> ID SQBL NUMBER COMMA . NUMBER SQBR VM2
    (8) VM -> ID SQBL NUMBER COMMA . NUMBER COMMA NUMBER SQBR VM2

    NUMBER          shift and go to state 73


state 52

    (9) VM2 -> COMMA ID VM2 .

    COLON           reduce using rule 9 (VM2 -> COMMA ID VM2 .)


state 53

    (10) VM2 -> COMMA ID SQBL . NUMBER SQBR VM2
    (11) VM2 -> COMMA ID SQBL . NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> COMMA ID SQBL . NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2

    NUMBER          shift and go to state 74


state 54

    (23) P -> P AUXPOSP PROCEDURE ID COLON . B ENDP
    (26) B -> . BEGIN COLON ST

    BEGIN           shift and go to state 15

    B                              shift and go to state 75

state 55

    (27) ST -> S ST .

    END             reduce using rule 27 (ST -> S ST .)
    ENDP            reduce using rule 27 (ST -> S ST .)
    DWHILE          reduce using rule 27 (ST -> S ST .)
    ENDIF           reduce using rule 27 (ST -> S ST .)
    ELSE            reduce using rule 27 (ST -> S ST .)
    ENDW            reduce using rule 27 (ST -> S ST .)
    ENDF            reduce using rule 27 (ST -> S ST .)


state 56

    (29) S -> FOR ID . IN ID COLON ST ENDF

    IN              shift and go to state 76


state 57

    (60) VAMC -> ID SQBL . IDNUM SQBR
    (61) VAMC -> ID SQBL . IDNUM COMMA IDNUM SQBR
    (62) VAMC -> ID SQBL . IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 78

state 58

    (30) S -> DO COLON . ST DWHILE COLON CONDITION ENDDO
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DWHILE          reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    ST                             shift and go to state 80
    S                              shift and go to state 39
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 59

    (31) S -> GOSUB ID .

    FOR             reduce using rule 31 (S -> GOSUB ID .)
    DO              reduce using rule 31 (S -> GOSUB ID .)
    GOSUB           reduce using rule 31 (S -> GOSUB ID .)
    PRINT           reduce using rule 31 (S -> GOSUB ID .)
    INPUT           reduce using rule 31 (S -> GOSUB ID .)
    IF              reduce using rule 31 (S -> GOSUB ID .)
    WHILE           reduce using rule 31 (S -> GOSUB ID .)
    ID              reduce using rule 31 (S -> GOSUB ID .)
    END             reduce using rule 31 (S -> GOSUB ID .)
    ENDP            reduce using rule 31 (S -> GOSUB ID .)
    DWHILE          reduce using rule 31 (S -> GOSUB ID .)
    ENDIF           reduce using rule 31 (S -> GOSUB ID .)
    ELSE            reduce using rule 31 (S -> GOSUB ID .)
    ENDW            reduce using rule 31 (S -> GOSUB ID .)
    ENDF            reduce using rule 31 (S -> GOSUB ID .)


state 60

    (32) S -> PRINT PARL . SID PARR
    (33) SID -> . SID PLUS SID_T
    (34) SID -> . SID_T
    (37) SID -> . empty
    (35) SID_T -> . STRING
    (36) SID_T -> . ID
    (76) empty -> .

    STRING          shift and go to state 84
    ID              shift and go to state 85
    PARR            reduce using rule 76 (empty -> .)
    PLUS            reduce using rule 76 (empty -> .)

    SID                            shift and go to state 81
    SID_T                          shift and go to state 82
    empty                          shift and go to state 83

state 61

    (38) S -> INPUT PARL . ID PARR
    (39) S -> INPUT PARL . ID SQBL IDNUM SQBR PARR
    (40) S -> INPUT PARL . ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> INPUT PARL . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR

    ID              shift and go to state 86


state 62

    (44) S -> VAMC ASSIGN . UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    UPDATE                         shift and go to state 87
    T                              shift and go to state 65
    F                              shift and go to state 66

state 63

    (63) S -> IF CONDITION . AUXCOLON ST ENDIF
    (64) S -> IF CONDITION . AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (75) AUXCOLON -> . COLON

    COLON           shift and go to state 89

    AUXCOLON                       shift and go to state 88

state 64

    (70) CONDITION -> UPDATE .
    (71) CONDITION -> UPDATE . NE UPDATE
    (72) CONDITION -> UPDATE . GT UPDATE
    (73) CONDITION -> UPDATE . LT UPDATE
    (74) CONDITION -> UPDATE . EQ UPDATE
    (46) UPDATE -> UPDATE . PLUS T
    (47) UPDATE -> UPDATE . MINUS T
    (48) UPDATE -> UPDATE . OR T

    COLON           reduce using rule 70 (CONDITION -> UPDATE .)
    PARR            reduce using rule 70 (CONDITION -> UPDATE .)
    ENDDO           reduce using rule 70 (CONDITION -> UPDATE .)
    NE              shift and go to state 90
    GT              shift and go to state 91
    LT              shift and go to state 92
    EQ              shift and go to state 93
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96


state 65

    (45) UPDATE -> T .
    (50) T -> T . TIMES F
    (51) T -> T . DIVIDE F
    (52) T -> T . AND F

    NE              reduce using rule 45 (UPDATE -> T .)
    GT              reduce using rule 45 (UPDATE -> T .)
    LT              reduce using rule 45 (UPDATE -> T .)
    EQ              reduce using rule 45 (UPDATE -> T .)
    PLUS            reduce using rule 45 (UPDATE -> T .)
    MINUS           reduce using rule 45 (UPDATE -> T .)
    OR              reduce using rule 45 (UPDATE -> T .)
    COLON           reduce using rule 45 (UPDATE -> T .)
    FOR             reduce using rule 45 (UPDATE -> T .)
    DO              reduce using rule 45 (UPDATE -> T .)
    GOSUB           reduce using rule 45 (UPDATE -> T .)
    PRINT           reduce using rule 45 (UPDATE -> T .)
    INPUT           reduce using rule 45 (UPDATE -> T .)
    IF              reduce using rule 45 (UPDATE -> T .)
    WHILE           reduce using rule 45 (UPDATE -> T .)
    ID              reduce using rule 45 (UPDATE -> T .)
    END             reduce using rule 45 (UPDATE -> T .)
    ENDP            reduce using rule 45 (UPDATE -> T .)
    DWHILE          reduce using rule 45 (UPDATE -> T .)
    ENDIF           reduce using rule 45 (UPDATE -> T .)
    ELSE            reduce using rule 45 (UPDATE -> T .)
    ENDW            reduce using rule 45 (UPDATE -> T .)
    ENDF            reduce using rule 45 (UPDATE -> T .)
    PARR            reduce using rule 45 (UPDATE -> T .)
    ENDDO           reduce using rule 45 (UPDATE -> T .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    AND             shift and go to state 99


state 66

    (49) T -> F .

    TIMES           reduce using rule 49 (T -> F .)
    DIVIDE          reduce using rule 49 (T -> F .)
    AND             reduce using rule 49 (T -> F .)
    NE              reduce using rule 49 (T -> F .)
    GT              reduce using rule 49 (T -> F .)
    LT              reduce using rule 49 (T -> F .)
    EQ              reduce using rule 49 (T -> F .)
    PLUS            reduce using rule 49 (T -> F .)
    MINUS           reduce using rule 49 (T -> F .)
    OR              reduce using rule 49 (T -> F .)
    COLON           reduce using rule 49 (T -> F .)
    FOR             reduce using rule 49 (T -> F .)
    DO              reduce using rule 49 (T -> F .)
    GOSUB           reduce using rule 49 (T -> F .)
    PRINT           reduce using rule 49 (T -> F .)
    INPUT           reduce using rule 49 (T -> F .)
    IF              reduce using rule 49 (T -> F .)
    WHILE           reduce using rule 49 (T -> F .)
    ID              reduce using rule 49 (T -> F .)
    END             reduce using rule 49 (T -> F .)
    ENDP            reduce using rule 49 (T -> F .)
    DWHILE          reduce using rule 49 (T -> F .)
    ENDIF           reduce using rule 49 (T -> F .)
    ELSE            reduce using rule 49 (T -> F .)
    ENDW            reduce using rule 49 (T -> F .)
    ENDF            reduce using rule 49 (T -> F .)
    PARR            reduce using rule 49 (T -> F .)
    ENDDO           reduce using rule 49 (T -> F .)


state 67

    (53) F -> ID .
    (54) F -> ID . SQBL IDNUM SQBR
    (55) F -> ID . SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> ID . SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    TIMES           reduce using rule 53 (F -> ID .)
    DIVIDE          reduce using rule 53 (F -> ID .)
    AND             reduce using rule 53 (F -> ID .)
    NE              reduce using rule 53 (F -> ID .)
    GT              reduce using rule 53 (F -> ID .)
    LT              reduce using rule 53 (F -> ID .)
    EQ              reduce using rule 53 (F -> ID .)
    PLUS            reduce using rule 53 (F -> ID .)
    MINUS           reduce using rule 53 (F -> ID .)
    OR              reduce using rule 53 (F -> ID .)
    COLON           reduce using rule 53 (F -> ID .)
    FOR             reduce using rule 53 (F -> ID .)
    DO              reduce using rule 53 (F -> ID .)
    GOSUB           reduce using rule 53 (F -> ID .)
    PRINT           reduce using rule 53 (F -> ID .)
    INPUT           reduce using rule 53 (F -> ID .)
    IF              reduce using rule 53 (F -> ID .)
    WHILE           reduce using rule 53 (F -> ID .)
    ID              reduce using rule 53 (F -> ID .)
    END             reduce using rule 53 (F -> ID .)
    ENDP            reduce using rule 53 (F -> ID .)
    DWHILE          reduce using rule 53 (F -> ID .)
    ENDIF           reduce using rule 53 (F -> ID .)
    ELSE            reduce using rule 53 (F -> ID .)
    ENDW            reduce using rule 53 (F -> ID .)
    ENDF            reduce using rule 53 (F -> ID .)
    PARR            reduce using rule 53 (F -> ID .)
    ENDDO           reduce using rule 53 (F -> ID .)
    SQBL            shift and go to state 100


state 68

    (57) F -> NUMBER .

    TIMES           reduce using rule 57 (F -> NUMBER .)
    DIVIDE          reduce using rule 57 (F -> NUMBER .)
    AND             reduce using rule 57 (F -> NUMBER .)
    NE              reduce using rule 57 (F -> NUMBER .)
    GT              reduce using rule 57 (F -> NUMBER .)
    LT              reduce using rule 57 (F -> NUMBER .)
    EQ              reduce using rule 57 (F -> NUMBER .)
    PLUS            reduce using rule 57 (F -> NUMBER .)
    MINUS           reduce using rule 57 (F -> NUMBER .)
    OR              reduce using rule 57 (F -> NUMBER .)
    COLON           reduce using rule 57 (F -> NUMBER .)
    FOR             reduce using rule 57 (F -> NUMBER .)
    DO              reduce using rule 57 (F -> NUMBER .)
    GOSUB           reduce using rule 57 (F -> NUMBER .)
    PRINT           reduce using rule 57 (F -> NUMBER .)
    INPUT           reduce using rule 57 (F -> NUMBER .)
    IF              reduce using rule 57 (F -> NUMBER .)
    WHILE           reduce using rule 57 (F -> NUMBER .)
    ID              reduce using rule 57 (F -> NUMBER .)
    END             reduce using rule 57 (F -> NUMBER .)
    ENDP            reduce using rule 57 (F -> NUMBER .)
    DWHILE          reduce using rule 57 (F -> NUMBER .)
    ENDIF           reduce using rule 57 (F -> NUMBER .)
    ELSE            reduce using rule 57 (F -> NUMBER .)
    ENDW            reduce using rule 57 (F -> NUMBER .)
    ENDF            reduce using rule 57 (F -> NUMBER .)
    PARR            reduce using rule 57 (F -> NUMBER .)
    ENDDO           reduce using rule 57 (F -> NUMBER .)


state 69

    (58) F -> PARL . CONDITION PARR
    (70) CONDITION -> . UPDATE
    (71) CONDITION -> . UPDATE NE UPDATE
    (72) CONDITION -> . UPDATE GT UPDATE
    (73) CONDITION -> . UPDATE LT UPDATE
    (74) CONDITION -> . UPDATE EQ UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    CONDITION                      shift and go to state 101
    UPDATE                         shift and go to state 64
    T                              shift and go to state 65
    F                              shift and go to state 66

state 70

    (67) S -> WHILE AUXWHILE . CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (70) CONDITION -> . UPDATE
    (71) CONDITION -> . UPDATE NE UPDATE
    (72) CONDITION -> . UPDATE GT UPDATE
    (73) CONDITION -> . UPDATE LT UPDATE
    (74) CONDITION -> . UPDATE EQ UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    CONDITION                      shift and go to state 102
    UPDATE                         shift and go to state 64
    T                              shift and go to state 65
    F                              shift and go to state 66

state 71

    (68) AUXWHILE -> empty .

    ID              reduce using rule 68 (AUXWHILE -> empty .)
    NUMBER          reduce using rule 68 (AUXWHILE -> empty .)
    PARL            reduce using rule 68 (AUXWHILE -> empty .)


state 72

    (6) VM -> ID SQBL NUMBER SQBR VM2 .

    COLON           reduce using rule 6 (VM -> ID SQBL NUMBER SQBR VM2 .)


state 73

    (7) VM -> ID SQBL NUMBER COMMA NUMBER . SQBR VM2
    (8) VM -> ID SQBL NUMBER COMMA NUMBER . COMMA NUMBER SQBR VM2

    SQBR            shift and go to state 104
    COMMA           shift and go to state 103


state 74

    (10) VM2 -> COMMA ID SQBL NUMBER . SQBR VM2
    (11) VM2 -> COMMA ID SQBL NUMBER . COMMA NUMBER SQBR VM2
    (12) VM2 -> COMMA ID SQBL NUMBER . COMMA NUMBER COMMA NUMBER SQBR VM2

    SQBR            shift and go to state 106
    COMMA           shift and go to state 105


state 75

    (23) P -> P AUXPOSP PROCEDURE ID COLON B . ENDP

    ENDP            shift and go to state 107


state 76

    (29) S -> FOR ID IN . ID COLON ST ENDF

    ID              shift and go to state 108


state 77

    (42) IDNUM -> ID .

    SQBR            reduce using rule 42 (IDNUM -> ID .)
    COMMA           reduce using rule 42 (IDNUM -> ID .)


state 78

    (60) VAMC -> ID SQBL IDNUM . SQBR
    (61) VAMC -> ID SQBL IDNUM . COMMA IDNUM SQBR
    (62) VAMC -> ID SQBL IDNUM . COMMA IDNUM COMMA IDNUM SQBR

    SQBR            shift and go to state 109
    COMMA           shift and go to state 110


state 79

    (43) IDNUM -> NUMBER .

    SQBR            reduce using rule 43 (IDNUM -> NUMBER .)
    COMMA           reduce using rule 43 (IDNUM -> NUMBER .)


state 80

    (30) S -> DO COLON ST . DWHILE COLON CONDITION ENDDO

    DWHILE          shift and go to state 111


state 81

    (32) S -> PRINT PARL SID . PARR
    (33) SID -> SID . PLUS SID_T

    PARR            shift and go to state 112
    PLUS            shift and go to state 113


state 82

    (34) SID -> SID_T .

    PARR            reduce using rule 34 (SID -> SID_T .)
    PLUS            reduce using rule 34 (SID -> SID_T .)


state 83

    (37) SID -> empty .

    PARR            reduce using rule 37 (SID -> empty .)
    PLUS            reduce using rule 37 (SID -> empty .)


state 84

    (35) SID_T -> STRING .

    PARR            reduce using rule 35 (SID_T -> STRING .)
    PLUS            reduce using rule 35 (SID_T -> STRING .)


state 85

    (36) SID_T -> ID .

    PARR            reduce using rule 36 (SID_T -> ID .)
    PLUS            reduce using rule 36 (SID_T -> ID .)


state 86

    (38) S -> INPUT PARL ID . PARR
    (39) S -> INPUT PARL ID . SQBL IDNUM SQBR PARR
    (40) S -> INPUT PARL ID . SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> INPUT PARL ID . SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR

    PARR            shift and go to state 114
    SQBL            shift and go to state 115


state 87

    (44) S -> VAMC ASSIGN UPDATE .
    (46) UPDATE -> UPDATE . PLUS T
    (47) UPDATE -> UPDATE . MINUS T
    (48) UPDATE -> UPDATE . OR T

    FOR             reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    DO              reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    GOSUB           reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    PRINT           reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    INPUT           reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    IF              reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    WHILE           reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    ID              reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    END             reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    ENDP            reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    DWHILE          reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    ENDIF           reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    ELSE            reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    ENDW            reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    ENDF            reduce using rule 44 (S -> VAMC ASSIGN UPDATE .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96


state 88

    (63) S -> IF CONDITION AUXCOLON . ST ENDIF
    (64) S -> IF CONDITION AUXCOLON . ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    ENDIF           reduce using rule 76 (empty -> .)
    ELSE            reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    ST                             shift and go to state 116
    S                              shift and go to state 39
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 89

    (75) AUXCOLON -> COLON .

    FOR             reduce using rule 75 (AUXCOLON -> COLON .)
    DO              reduce using rule 75 (AUXCOLON -> COLON .)
    GOSUB           reduce using rule 75 (AUXCOLON -> COLON .)
    PRINT           reduce using rule 75 (AUXCOLON -> COLON .)
    INPUT           reduce using rule 75 (AUXCOLON -> COLON .)
    IF              reduce using rule 75 (AUXCOLON -> COLON .)
    WHILE           reduce using rule 75 (AUXCOLON -> COLON .)
    ID              reduce using rule 75 (AUXCOLON -> COLON .)
    ENDIF           reduce using rule 75 (AUXCOLON -> COLON .)
    ELSE            reduce using rule 75 (AUXCOLON -> COLON .)
    ENDW            reduce using rule 75 (AUXCOLON -> COLON .)


state 90

    (71) CONDITION -> UPDATE NE . UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    UPDATE                         shift and go to state 117
    T                              shift and go to state 65
    F                              shift and go to state 66

state 91

    (72) CONDITION -> UPDATE GT . UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    UPDATE                         shift and go to state 118
    T                              shift and go to state 65
    F                              shift and go to state 66

state 92

    (73) CONDITION -> UPDATE LT . UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    UPDATE                         shift and go to state 119
    T                              shift and go to state 65
    F                              shift and go to state 66

state 93

    (74) CONDITION -> UPDATE EQ . UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    UPDATE                         shift and go to state 120
    T                              shift and go to state 65
    F                              shift and go to state 66

state 94

    (46) UPDATE -> UPDATE PLUS . T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    T                              shift and go to state 121
    F                              shift and go to state 66

state 95

    (47) UPDATE -> UPDATE MINUS . T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    T                              shift and go to state 122
    F                              shift and go to state 66

state 96

    (48) UPDATE -> UPDATE OR . T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    T                              shift and go to state 123
    F                              shift and go to state 66

state 97

    (50) T -> T TIMES . F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    F                              shift and go to state 124

state 98

    (51) T -> T DIVIDE . F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    F                              shift and go to state 125

state 99

    (52) T -> T AND . F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    F                              shift and go to state 126

state 100

    (54) F -> ID SQBL . IDNUM SQBR
    (55) F -> ID SQBL . IDNUM COMMA IDNUM SQBR
    (56) F -> ID SQBL . IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 127

state 101

    (58) F -> PARL CONDITION . PARR

    PARR            shift and go to state 128


state 102

    (67) S -> WHILE AUXWHILE CONDITION . AUXCOLON ST AUXENDWHILE ENDW
    (75) AUXCOLON -> . COLON

    COLON           shift and go to state 89

    AUXCOLON                       shift and go to state 129

state 103

    (8) VM -> ID SQBL NUMBER COMMA NUMBER COMMA . NUMBER SQBR VM2

    NUMBER          shift and go to state 130


state 104

    (7) VM -> ID SQBL NUMBER COMMA NUMBER SQBR . VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 131
    empty                          shift and go to state 21

state 105

    (11) VM2 -> COMMA ID SQBL NUMBER COMMA . NUMBER SQBR VM2
    (12) VM2 -> COMMA ID SQBL NUMBER COMMA . NUMBER COMMA NUMBER SQBR VM2

    NUMBER          shift and go to state 132


state 106

    (10) VM2 -> COMMA ID SQBL NUMBER SQBR . VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 133
    empty                          shift and go to state 21

state 107

    (23) P -> P AUXPOSP PROCEDURE ID COLON B ENDP .

    BEGIN           reduce using rule 23 (P -> P AUXPOSP PROCEDURE ID COLON B ENDP .)
    PROCEDURE       reduce using rule 23 (P -> P AUXPOSP PROCEDURE ID COLON B ENDP .)


state 108

    (29) S -> FOR ID IN ID . COLON ST ENDF

    COLON           shift and go to state 134


state 109

    (60) VAMC -> ID SQBL IDNUM SQBR .

    ASSIGN          reduce using rule 60 (VAMC -> ID SQBL IDNUM SQBR .)


state 110

    (61) VAMC -> ID SQBL IDNUM COMMA . IDNUM SQBR
    (62) VAMC -> ID SQBL IDNUM COMMA . IDNUM COMMA IDNUM SQBR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 135

state 111

    (30) S -> DO COLON ST DWHILE . COLON CONDITION ENDDO

    COLON           shift and go to state 136


state 112

    (32) S -> PRINT PARL SID PARR .

    FOR             reduce using rule 32 (S -> PRINT PARL SID PARR .)
    DO              reduce using rule 32 (S -> PRINT PARL SID PARR .)
    GOSUB           reduce using rule 32 (S -> PRINT PARL SID PARR .)
    PRINT           reduce using rule 32 (S -> PRINT PARL SID PARR .)
    INPUT           reduce using rule 32 (S -> PRINT PARL SID PARR .)
    IF              reduce using rule 32 (S -> PRINT PARL SID PARR .)
    WHILE           reduce using rule 32 (S -> PRINT PARL SID PARR .)
    ID              reduce using rule 32 (S -> PRINT PARL SID PARR .)
    END             reduce using rule 32 (S -> PRINT PARL SID PARR .)
    ENDP            reduce using rule 32 (S -> PRINT PARL SID PARR .)
    DWHILE          reduce using rule 32 (S -> PRINT PARL SID PARR .)
    ENDIF           reduce using rule 32 (S -> PRINT PARL SID PARR .)
    ELSE            reduce using rule 32 (S -> PRINT PARL SID PARR .)
    ENDW            reduce using rule 32 (S -> PRINT PARL SID PARR .)
    ENDF            reduce using rule 32 (S -> PRINT PARL SID PARR .)


state 113

    (33) SID -> SID PLUS . SID_T
    (35) SID_T -> . STRING
    (36) SID_T -> . ID

    STRING          shift and go to state 84
    ID              shift and go to state 85

    SID_T                          shift and go to state 137

state 114

    (38) S -> INPUT PARL ID PARR .

    FOR             reduce using rule 38 (S -> INPUT PARL ID PARR .)
    DO              reduce using rule 38 (S -> INPUT PARL ID PARR .)
    GOSUB           reduce using rule 38 (S -> INPUT PARL ID PARR .)
    PRINT           reduce using rule 38 (S -> INPUT PARL ID PARR .)
    INPUT           reduce using rule 38 (S -> INPUT PARL ID PARR .)
    IF              reduce using rule 38 (S -> INPUT PARL ID PARR .)
    WHILE           reduce using rule 38 (S -> INPUT PARL ID PARR .)
    ID              reduce using rule 38 (S -> INPUT PARL ID PARR .)
    END             reduce using rule 38 (S -> INPUT PARL ID PARR .)
    ENDP            reduce using rule 38 (S -> INPUT PARL ID PARR .)
    DWHILE          reduce using rule 38 (S -> INPUT PARL ID PARR .)
    ENDIF           reduce using rule 38 (S -> INPUT PARL ID PARR .)
    ELSE            reduce using rule 38 (S -> INPUT PARL ID PARR .)
    ENDW            reduce using rule 38 (S -> INPUT PARL ID PARR .)
    ENDF            reduce using rule 38 (S -> INPUT PARL ID PARR .)


state 115

    (39) S -> INPUT PARL ID SQBL . IDNUM SQBR PARR
    (40) S -> INPUT PARL ID SQBL . IDNUM COMMA IDNUM SQBR PARR
    (41) S -> INPUT PARL ID SQBL . IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 138

state 116

    (63) S -> IF CONDITION AUXCOLON ST . ENDIF
    (64) S -> IF CONDITION AUXCOLON ST . ELSE COLON AUXQ ST AUXENDIF ENDIF

    ENDIF           shift and go to state 139
    ELSE            shift and go to state 140


state 117

    (71) CONDITION -> UPDATE NE UPDATE .
    (46) UPDATE -> UPDATE . PLUS T
    (47) UPDATE -> UPDATE . MINUS T
    (48) UPDATE -> UPDATE . OR T

    COLON           reduce using rule 71 (CONDITION -> UPDATE NE UPDATE .)
    PARR            reduce using rule 71 (CONDITION -> UPDATE NE UPDATE .)
    ENDDO           reduce using rule 71 (CONDITION -> UPDATE NE UPDATE .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96


state 118

    (72) CONDITION -> UPDATE GT UPDATE .
    (46) UPDATE -> UPDATE . PLUS T
    (47) UPDATE -> UPDATE . MINUS T
    (48) UPDATE -> UPDATE . OR T

    COLON           reduce using rule 72 (CONDITION -> UPDATE GT UPDATE .)
    PARR            reduce using rule 72 (CONDITION -> UPDATE GT UPDATE .)
    ENDDO           reduce using rule 72 (CONDITION -> UPDATE GT UPDATE .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96


state 119

    (73) CONDITION -> UPDATE LT UPDATE .
    (46) UPDATE -> UPDATE . PLUS T
    (47) UPDATE -> UPDATE . MINUS T
    (48) UPDATE -> UPDATE . OR T

    COLON           reduce using rule 73 (CONDITION -> UPDATE LT UPDATE .)
    PARR            reduce using rule 73 (CONDITION -> UPDATE LT UPDATE .)
    ENDDO           reduce using rule 73 (CONDITION -> UPDATE LT UPDATE .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96


state 120

    (74) CONDITION -> UPDATE EQ UPDATE .
    (46) UPDATE -> UPDATE . PLUS T
    (47) UPDATE -> UPDATE . MINUS T
    (48) UPDATE -> UPDATE . OR T

    COLON           reduce using rule 74 (CONDITION -> UPDATE EQ UPDATE .)
    PARR            reduce using rule 74 (CONDITION -> UPDATE EQ UPDATE .)
    ENDDO           reduce using rule 74 (CONDITION -> UPDATE EQ UPDATE .)
    PLUS            shift and go to state 94
    MINUS           shift and go to state 95
    OR              shift and go to state 96


state 121

    (46) UPDATE -> UPDATE PLUS T .
    (50) T -> T . TIMES F
    (51) T -> T . DIVIDE F
    (52) T -> T . AND F

    NE              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    GT              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    LT              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    EQ              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    PLUS            reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    MINUS           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    OR              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    COLON           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    FOR             reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    DO              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    GOSUB           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    PRINT           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    INPUT           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    IF              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    WHILE           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ID              reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    END             reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ENDP            reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    DWHILE          reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ENDIF           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ELSE            reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ENDW            reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ENDF            reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    PARR            reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    ENDDO           reduce using rule 46 (UPDATE -> UPDATE PLUS T .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    AND             shift and go to state 99


state 122

    (47) UPDATE -> UPDATE MINUS T .
    (50) T -> T . TIMES F
    (51) T -> T . DIVIDE F
    (52) T -> T . AND F

    NE              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    GT              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    LT              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    EQ              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    PLUS            reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    MINUS           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    OR              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    COLON           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    FOR             reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    DO              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    GOSUB           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    PRINT           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    INPUT           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    IF              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    WHILE           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ID              reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    END             reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ENDP            reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    DWHILE          reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ENDIF           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ELSE            reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ENDW            reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ENDF            reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    PARR            reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    ENDDO           reduce using rule 47 (UPDATE -> UPDATE MINUS T .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    AND             shift and go to state 99


state 123

    (48) UPDATE -> UPDATE OR T .
    (50) T -> T . TIMES F
    (51) T -> T . DIVIDE F
    (52) T -> T . AND F

    NE              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    GT              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    LT              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    EQ              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    PLUS            reduce using rule 48 (UPDATE -> UPDATE OR T .)
    MINUS           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    OR              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    COLON           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    FOR             reduce using rule 48 (UPDATE -> UPDATE OR T .)
    DO              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    GOSUB           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    PRINT           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    INPUT           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    IF              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    WHILE           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ID              reduce using rule 48 (UPDATE -> UPDATE OR T .)
    END             reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ENDP            reduce using rule 48 (UPDATE -> UPDATE OR T .)
    DWHILE          reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ENDIF           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ELSE            reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ENDW            reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ENDF            reduce using rule 48 (UPDATE -> UPDATE OR T .)
    PARR            reduce using rule 48 (UPDATE -> UPDATE OR T .)
    ENDDO           reduce using rule 48 (UPDATE -> UPDATE OR T .)
    TIMES           shift and go to state 97
    DIVIDE          shift and go to state 98
    AND             shift and go to state 99


state 124

    (50) T -> T TIMES F .

    TIMES           reduce using rule 50 (T -> T TIMES F .)
    DIVIDE          reduce using rule 50 (T -> T TIMES F .)
    AND             reduce using rule 50 (T -> T TIMES F .)
    NE              reduce using rule 50 (T -> T TIMES F .)
    GT              reduce using rule 50 (T -> T TIMES F .)
    LT              reduce using rule 50 (T -> T TIMES F .)
    EQ              reduce using rule 50 (T -> T TIMES F .)
    PLUS            reduce using rule 50 (T -> T TIMES F .)
    MINUS           reduce using rule 50 (T -> T TIMES F .)
    OR              reduce using rule 50 (T -> T TIMES F .)
    COLON           reduce using rule 50 (T -> T TIMES F .)
    FOR             reduce using rule 50 (T -> T TIMES F .)
    DO              reduce using rule 50 (T -> T TIMES F .)
    GOSUB           reduce using rule 50 (T -> T TIMES F .)
    PRINT           reduce using rule 50 (T -> T TIMES F .)
    INPUT           reduce using rule 50 (T -> T TIMES F .)
    IF              reduce using rule 50 (T -> T TIMES F .)
    WHILE           reduce using rule 50 (T -> T TIMES F .)
    ID              reduce using rule 50 (T -> T TIMES F .)
    END             reduce using rule 50 (T -> T TIMES F .)
    ENDP            reduce using rule 50 (T -> T TIMES F .)
    DWHILE          reduce using rule 50 (T -> T TIMES F .)
    ENDIF           reduce using rule 50 (T -> T TIMES F .)
    ELSE            reduce using rule 50 (T -> T TIMES F .)
    ENDW            reduce using rule 50 (T -> T TIMES F .)
    ENDF            reduce using rule 50 (T -> T TIMES F .)
    PARR            reduce using rule 50 (T -> T TIMES F .)
    ENDDO           reduce using rule 50 (T -> T TIMES F .)


state 125

    (51) T -> T DIVIDE F .

    TIMES           reduce using rule 51 (T -> T DIVIDE F .)
    DIVIDE          reduce using rule 51 (T -> T DIVIDE F .)
    AND             reduce using rule 51 (T -> T DIVIDE F .)
    NE              reduce using rule 51 (T -> T DIVIDE F .)
    GT              reduce using rule 51 (T -> T DIVIDE F .)
    LT              reduce using rule 51 (T -> T DIVIDE F .)
    EQ              reduce using rule 51 (T -> T DIVIDE F .)
    PLUS            reduce using rule 51 (T -> T DIVIDE F .)
    MINUS           reduce using rule 51 (T -> T DIVIDE F .)
    OR              reduce using rule 51 (T -> T DIVIDE F .)
    COLON           reduce using rule 51 (T -> T DIVIDE F .)
    FOR             reduce using rule 51 (T -> T DIVIDE F .)
    DO              reduce using rule 51 (T -> T DIVIDE F .)
    GOSUB           reduce using rule 51 (T -> T DIVIDE F .)
    PRINT           reduce using rule 51 (T -> T DIVIDE F .)
    INPUT           reduce using rule 51 (T -> T DIVIDE F .)
    IF              reduce using rule 51 (T -> T DIVIDE F .)
    WHILE           reduce using rule 51 (T -> T DIVIDE F .)
    ID              reduce using rule 51 (T -> T DIVIDE F .)
    END             reduce using rule 51 (T -> T DIVIDE F .)
    ENDP            reduce using rule 51 (T -> T DIVIDE F .)
    DWHILE          reduce using rule 51 (T -> T DIVIDE F .)
    ENDIF           reduce using rule 51 (T -> T DIVIDE F .)
    ELSE            reduce using rule 51 (T -> T DIVIDE F .)
    ENDW            reduce using rule 51 (T -> T DIVIDE F .)
    ENDF            reduce using rule 51 (T -> T DIVIDE F .)
    PARR            reduce using rule 51 (T -> T DIVIDE F .)
    ENDDO           reduce using rule 51 (T -> T DIVIDE F .)


state 126

    (52) T -> T AND F .

    TIMES           reduce using rule 52 (T -> T AND F .)
    DIVIDE          reduce using rule 52 (T -> T AND F .)
    AND             reduce using rule 52 (T -> T AND F .)
    NE              reduce using rule 52 (T -> T AND F .)
    GT              reduce using rule 52 (T -> T AND F .)
    LT              reduce using rule 52 (T -> T AND F .)
    EQ              reduce using rule 52 (T -> T AND F .)
    PLUS            reduce using rule 52 (T -> T AND F .)
    MINUS           reduce using rule 52 (T -> T AND F .)
    OR              reduce using rule 52 (T -> T AND F .)
    COLON           reduce using rule 52 (T -> T AND F .)
    FOR             reduce using rule 52 (T -> T AND F .)
    DO              reduce using rule 52 (T -> T AND F .)
    GOSUB           reduce using rule 52 (T -> T AND F .)
    PRINT           reduce using rule 52 (T -> T AND F .)
    INPUT           reduce using rule 52 (T -> T AND F .)
    IF              reduce using rule 52 (T -> T AND F .)
    WHILE           reduce using rule 52 (T -> T AND F .)
    ID              reduce using rule 52 (T -> T AND F .)
    END             reduce using rule 52 (T -> T AND F .)
    ENDP            reduce using rule 52 (T -> T AND F .)
    DWHILE          reduce using rule 52 (T -> T AND F .)
    ENDIF           reduce using rule 52 (T -> T AND F .)
    ELSE            reduce using rule 52 (T -> T AND F .)
    ENDW            reduce using rule 52 (T -> T AND F .)
    ENDF            reduce using rule 52 (T -> T AND F .)
    PARR            reduce using rule 52 (T -> T AND F .)
    ENDDO           reduce using rule 52 (T -> T AND F .)


state 127

    (54) F -> ID SQBL IDNUM . SQBR
    (55) F -> ID SQBL IDNUM . COMMA IDNUM SQBR
    (56) F -> ID SQBL IDNUM . COMMA IDNUM COMMA IDNUM SQBR

    SQBR            shift and go to state 141
    COMMA           shift and go to state 142


state 128

    (58) F -> PARL CONDITION PARR .

    TIMES           reduce using rule 58 (F -> PARL CONDITION PARR .)
    DIVIDE          reduce using rule 58 (F -> PARL CONDITION PARR .)
    AND             reduce using rule 58 (F -> PARL CONDITION PARR .)
    NE              reduce using rule 58 (F -> PARL CONDITION PARR .)
    GT              reduce using rule 58 (F -> PARL CONDITION PARR .)
    LT              reduce using rule 58 (F -> PARL CONDITION PARR .)
    EQ              reduce using rule 58 (F -> PARL CONDITION PARR .)
    PLUS            reduce using rule 58 (F -> PARL CONDITION PARR .)
    MINUS           reduce using rule 58 (F -> PARL CONDITION PARR .)
    OR              reduce using rule 58 (F -> PARL CONDITION PARR .)
    COLON           reduce using rule 58 (F -> PARL CONDITION PARR .)
    FOR             reduce using rule 58 (F -> PARL CONDITION PARR .)
    DO              reduce using rule 58 (F -> PARL CONDITION PARR .)
    GOSUB           reduce using rule 58 (F -> PARL CONDITION PARR .)
    PRINT           reduce using rule 58 (F -> PARL CONDITION PARR .)
    INPUT           reduce using rule 58 (F -> PARL CONDITION PARR .)
    IF              reduce using rule 58 (F -> PARL CONDITION PARR .)
    WHILE           reduce using rule 58 (F -> PARL CONDITION PARR .)
    ID              reduce using rule 58 (F -> PARL CONDITION PARR .)
    END             reduce using rule 58 (F -> PARL CONDITION PARR .)
    ENDP            reduce using rule 58 (F -> PARL CONDITION PARR .)
    DWHILE          reduce using rule 58 (F -> PARL CONDITION PARR .)
    ENDIF           reduce using rule 58 (F -> PARL CONDITION PARR .)
    ELSE            reduce using rule 58 (F -> PARL CONDITION PARR .)
    ENDW            reduce using rule 58 (F -> PARL CONDITION PARR .)
    ENDF            reduce using rule 58 (F -> PARL CONDITION PARR .)
    PARR            reduce using rule 58 (F -> PARL CONDITION PARR .)
    ENDDO           reduce using rule 58 (F -> PARL CONDITION PARR .)


state 129

    (67) S -> WHILE AUXWHILE CONDITION AUXCOLON . ST AUXENDWHILE ENDW
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    ENDW            reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    ST                             shift and go to state 143
    S                              shift and go to state 39
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 130

    (8) VM -> ID SQBL NUMBER COMMA NUMBER COMMA NUMBER . SQBR VM2

    SQBR            shift and go to state 144


state 131

    (7) VM -> ID SQBL NUMBER COMMA NUMBER SQBR VM2 .

    COLON           reduce using rule 7 (VM -> ID SQBL NUMBER COMMA NUMBER SQBR VM2 .)


state 132

    (11) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER . SQBR VM2
    (12) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER . COMMA NUMBER SQBR VM2

    SQBR            shift and go to state 146
    COMMA           shift and go to state 145


state 133

    (10) VM2 -> COMMA ID SQBL NUMBER SQBR VM2 .

    COLON           reduce using rule 10 (VM2 -> COMMA ID SQBL NUMBER SQBR VM2 .)


state 134

    (29) S -> FOR ID IN ID COLON . ST ENDF
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    ENDF            reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    ST                             shift and go to state 147
    S                              shift and go to state 39
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 135

    (61) VAMC -> ID SQBL IDNUM COMMA IDNUM . SQBR
    (62) VAMC -> ID SQBL IDNUM COMMA IDNUM . COMMA IDNUM SQBR

    SQBR            shift and go to state 149
    COMMA           shift and go to state 148


state 136

    (30) S -> DO COLON ST DWHILE COLON . CONDITION ENDDO
    (70) CONDITION -> . UPDATE
    (71) CONDITION -> . UPDATE NE UPDATE
    (72) CONDITION -> . UPDATE GT UPDATE
    (73) CONDITION -> . UPDATE LT UPDATE
    (74) CONDITION -> . UPDATE EQ UPDATE
    (45) UPDATE -> . T
    (46) UPDATE -> . UPDATE PLUS T
    (47) UPDATE -> . UPDATE MINUS T
    (48) UPDATE -> . UPDATE OR T
    (49) T -> . F
    (50) T -> . T TIMES F
    (51) T -> . T DIVIDE F
    (52) T -> . T AND F
    (53) F -> . ID
    (54) F -> . ID SQBL IDNUM SQBR
    (55) F -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (56) F -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR
    (57) F -> . NUMBER
    (58) F -> . PARL CONDITION PARR

    ID              shift and go to state 67
    NUMBER          shift and go to state 68
    PARL            shift and go to state 69

    CONDITION                      shift and go to state 150
    UPDATE                         shift and go to state 64
    T                              shift and go to state 65
    F                              shift and go to state 66

state 137

    (33) SID -> SID PLUS SID_T .

    PARR            reduce using rule 33 (SID -> SID PLUS SID_T .)
    PLUS            reduce using rule 33 (SID -> SID PLUS SID_T .)


state 138

    (39) S -> INPUT PARL ID SQBL IDNUM . SQBR PARR
    (40) S -> INPUT PARL ID SQBL IDNUM . COMMA IDNUM SQBR PARR
    (41) S -> INPUT PARL ID SQBL IDNUM . COMMA IDNUM COMMA IDNUM SQBR PARR

    SQBR            shift and go to state 151
    COMMA           shift and go to state 152


state 139

    (63) S -> IF CONDITION AUXCOLON ST ENDIF .

    FOR             reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    DO              reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    GOSUB           reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    PRINT           reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    INPUT           reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    IF              reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    WHILE           reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    ID              reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    END             reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    ENDP            reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    DWHILE          reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    ENDIF           reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    ELSE            reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    ENDW            reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)
    ENDF            reduce using rule 63 (S -> IF CONDITION AUXCOLON ST ENDIF .)


state 140

    (64) S -> IF CONDITION AUXCOLON ST ELSE . COLON AUXQ ST AUXENDIF ENDIF

    COLON           shift and go to state 153


state 141

    (54) F -> ID SQBL IDNUM SQBR .

    TIMES           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    DIVIDE          reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    AND             reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    NE              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    GT              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    LT              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    EQ              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    PLUS            reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    MINUS           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    OR              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    COLON           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    FOR             reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    DO              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    GOSUB           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    PRINT           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    INPUT           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    IF              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    WHILE           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ID              reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    END             reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ENDP            reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    DWHILE          reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ENDIF           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ELSE            reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ENDW            reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ENDF            reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    PARR            reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)
    ENDDO           reduce using rule 54 (F -> ID SQBL IDNUM SQBR .)


state 142

    (55) F -> ID SQBL IDNUM COMMA . IDNUM SQBR
    (56) F -> ID SQBL IDNUM COMMA . IDNUM COMMA IDNUM SQBR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 154

state 143

    (67) S -> WHILE AUXWHILE CONDITION AUXCOLON ST . AUXENDWHILE ENDW
    (69) AUXENDWHILE -> . empty
    (76) empty -> .

    ENDW            reduce using rule 76 (empty -> .)

    AUXENDWHILE                    shift and go to state 155
    empty                          shift and go to state 156

state 144

    (8) VM -> ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR . VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 157
    empty                          shift and go to state 21

state 145

    (12) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER COMMA . NUMBER SQBR VM2

    NUMBER          shift and go to state 158


state 146

    (11) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER SQBR . VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 159
    empty                          shift and go to state 21

state 147

    (29) S -> FOR ID IN ID COLON ST . ENDF

    ENDF            shift and go to state 160


state 148

    (62) VAMC -> ID SQBL IDNUM COMMA IDNUM COMMA . IDNUM SQBR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 161

state 149

    (61) VAMC -> ID SQBL IDNUM COMMA IDNUM SQBR .

    ASSIGN          reduce using rule 61 (VAMC -> ID SQBL IDNUM COMMA IDNUM SQBR .)


state 150

    (30) S -> DO COLON ST DWHILE COLON CONDITION . ENDDO

    ENDDO           shift and go to state 162


state 151

    (39) S -> INPUT PARL ID SQBL IDNUM SQBR . PARR

    PARR            shift and go to state 163


state 152

    (40) S -> INPUT PARL ID SQBL IDNUM COMMA . IDNUM SQBR PARR
    (41) S -> INPUT PARL ID SQBL IDNUM COMMA . IDNUM COMMA IDNUM SQBR PARR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 164

state 153

    (64) S -> IF CONDITION AUXCOLON ST ELSE COLON . AUXQ ST AUXENDIF ENDIF
    (65) AUXQ -> . empty
    (76) empty -> .

    FOR             reduce using rule 76 (empty -> .)
    DO              reduce using rule 76 (empty -> .)
    GOSUB           reduce using rule 76 (empty -> .)
    PRINT           reduce using rule 76 (empty -> .)
    INPUT           reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    ENDIF           reduce using rule 76 (empty -> .)

    AUXQ                           shift and go to state 165
    empty                          shift and go to state 166

state 154

    (55) F -> ID SQBL IDNUM COMMA IDNUM . SQBR
    (56) F -> ID SQBL IDNUM COMMA IDNUM . COMMA IDNUM SQBR

    SQBR            shift and go to state 168
    COMMA           shift and go to state 167


state 155

    (67) S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE . ENDW

    ENDW            shift and go to state 169


state 156

    (69) AUXENDWHILE -> empty .

    ENDW            reduce using rule 69 (AUXENDWHILE -> empty .)


state 157

    (8) VM -> ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2 .

    COLON           reduce using rule 8 (VM -> ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2 .)


state 158

    (12) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER . SQBR VM2

    SQBR            shift and go to state 170


state 159

    (11) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2 .

    COLON           reduce using rule 11 (VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2 .)


state 160

    (29) S -> FOR ID IN ID COLON ST ENDF .

    FOR             reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    DO              reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    GOSUB           reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    PRINT           reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    INPUT           reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    IF              reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    WHILE           reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    ID              reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    END             reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    ENDP            reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    DWHILE          reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    ENDIF           reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    ELSE            reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    ENDW            reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)
    ENDF            reduce using rule 29 (S -> FOR ID IN ID COLON ST ENDF .)


state 161

    (62) VAMC -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM . SQBR

    SQBR            shift and go to state 171


state 162

    (30) S -> DO COLON ST DWHILE COLON CONDITION ENDDO .

    FOR             reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    DO              reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    GOSUB           reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    PRINT           reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    INPUT           reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    IF              reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    WHILE           reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    ID              reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    END             reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    ENDP            reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    DWHILE          reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    ENDIF           reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    ELSE            reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    ENDW            reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)
    ENDF            reduce using rule 30 (S -> DO COLON ST DWHILE COLON CONDITION ENDDO .)


state 163

    (39) S -> INPUT PARL ID SQBL IDNUM SQBR PARR .

    FOR             reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    DO              reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    GOSUB           reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    PRINT           reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    INPUT           reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    IF              reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    WHILE           reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    ID              reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    END             reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    ENDP            reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    DWHILE          reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    ENDIF           reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    ELSE            reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    ENDW            reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)
    ENDF            reduce using rule 39 (S -> INPUT PARL ID SQBL IDNUM SQBR PARR .)


state 164

    (40) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM . SQBR PARR
    (41) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM . COMMA IDNUM SQBR PARR

    SQBR            shift and go to state 173
    COMMA           shift and go to state 172


state 165

    (64) S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ . ST AUXENDIF ENDIF
    (27) ST -> . S ST
    (28) ST -> . empty
    (29) S -> . FOR ID IN ID COLON ST ENDF
    (30) S -> . DO COLON ST DWHILE COLON CONDITION ENDDO
    (31) S -> . GOSUB ID
    (32) S -> . PRINT PARL SID PARR
    (38) S -> . INPUT PARL ID PARR
    (39) S -> . INPUT PARL ID SQBL IDNUM SQBR PARR
    (40) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR
    (41) S -> . INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR
    (44) S -> . VAMC ASSIGN UPDATE
    (63) S -> . IF CONDITION AUXCOLON ST ENDIF
    (64) S -> . IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF
    (67) S -> . WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW
    (76) empty -> .
    (59) VAMC -> . ID
    (60) VAMC -> . ID SQBL IDNUM SQBR
    (61) VAMC -> . ID SQBL IDNUM COMMA IDNUM SQBR
    (62) VAMC -> . ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR

    FOR             shift and go to state 41
    DO              shift and go to state 43
    GOSUB           shift and go to state 44
    PRINT           shift and go to state 45
    INPUT           shift and go to state 46
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    ENDIF           reduce using rule 76 (empty -> .)
    ID              shift and go to state 42

    ST                             shift and go to state 174
    S                              shift and go to state 39
    empty                          shift and go to state 40
    VAMC                           shift and go to state 47

state 166

    (65) AUXQ -> empty .

    FOR             reduce using rule 65 (AUXQ -> empty .)
    DO              reduce using rule 65 (AUXQ -> empty .)
    GOSUB           reduce using rule 65 (AUXQ -> empty .)
    PRINT           reduce using rule 65 (AUXQ -> empty .)
    INPUT           reduce using rule 65 (AUXQ -> empty .)
    IF              reduce using rule 65 (AUXQ -> empty .)
    WHILE           reduce using rule 65 (AUXQ -> empty .)
    ID              reduce using rule 65 (AUXQ -> empty .)
    ENDIF           reduce using rule 65 (AUXQ -> empty .)


state 167

    (56) F -> ID SQBL IDNUM COMMA IDNUM COMMA . IDNUM SQBR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 175

state 168

    (55) F -> ID SQBL IDNUM COMMA IDNUM SQBR .

    TIMES           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    DIVIDE          reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    AND             reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    NE              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    GT              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    LT              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    EQ              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    PLUS            reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    MINUS           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    OR              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    COLON           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    FOR             reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    DO              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    GOSUB           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    PRINT           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    INPUT           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    IF              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    WHILE           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ID              reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    END             reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ENDP            reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    DWHILE          reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ENDIF           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ELSE            reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ENDW            reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ENDF            reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    PARR            reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)
    ENDDO           reduce using rule 55 (F -> ID SQBL IDNUM COMMA IDNUM SQBR .)


state 169

    (67) S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .

    FOR             reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    DO              reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    GOSUB           reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    PRINT           reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    INPUT           reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    IF              reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    WHILE           reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    ID              reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    END             reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    ENDP            reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    DWHILE          reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    ENDIF           reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    ELSE            reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    ENDW            reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)
    ENDF            reduce using rule 67 (S -> WHILE AUXWHILE CONDITION AUXCOLON ST AUXENDWHILE ENDW .)


state 170

    (12) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR . VM2
    (9) VM2 -> . COMMA ID VM2
    (10) VM2 -> . COMMA ID SQBL NUMBER SQBR VM2
    (11) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER SQBR VM2
    (12) VM2 -> . COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2
    (13) VM2 -> . empty
    (76) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 76 (empty -> .)

    VM2                            shift and go to state 176
    empty                          shift and go to state 21

state 171

    (62) VAMC -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .

    ASSIGN          reduce using rule 62 (VAMC -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)


state 172

    (41) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA . IDNUM SQBR PARR
    (42) IDNUM -> . ID
    (43) IDNUM -> . NUMBER

    ID              shift and go to state 77
    NUMBER          shift and go to state 79

    IDNUM                          shift and go to state 177

state 173

    (40) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR . PARR

    PARR            shift and go to state 178


state 174

    (64) S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST . AUXENDIF ENDIF
    (66) AUXENDIF -> . empty
    (76) empty -> .

    ENDIF           reduce using rule 76 (empty -> .)

    AUXENDIF                       shift and go to state 179
    empty                          shift and go to state 180

state 175

    (56) F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM . SQBR

    SQBR            shift and go to state 181


state 176

    (12) VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2 .

    COLON           reduce using rule 12 (VM2 -> COMMA ID SQBL NUMBER COMMA NUMBER COMMA NUMBER SQBR VM2 .)


state 177

    (41) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM . SQBR PARR

    SQBR            shift and go to state 182


state 178

    (40) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .

    FOR             reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    DO              reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    GOSUB           reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    PRINT           reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    INPUT           reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    IF              reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    WHILE           reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    ID              reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    END             reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    ENDP            reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    DWHILE          reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    ENDIF           reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    ELSE            reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    ENDW            reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)
    ENDF            reduce using rule 40 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM SQBR PARR .)


state 179

    (64) S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF . ENDIF

    ENDIF           shift and go to state 183


state 180

    (66) AUXENDIF -> empty .

    ENDIF           reduce using rule 66 (AUXENDIF -> empty .)


state 181

    (56) F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .

    TIMES           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    DIVIDE          reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    AND             reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    NE              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    GT              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    LT              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    EQ              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    PLUS            reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    MINUS           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    OR              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    COLON           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    FOR             reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    DO              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    GOSUB           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    PRINT           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    INPUT           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    IF              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    WHILE           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ID              reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    END             reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ENDP            reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    DWHILE          reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ENDIF           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ELSE            reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ENDW            reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ENDF            reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    PARR            reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)
    ENDDO           reduce using rule 56 (F -> ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR .)


state 182

    (41) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR . PARR

    PARR            shift and go to state 184


state 183

    (64) S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .

    FOR             reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    DO              reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    GOSUB           reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    PRINT           reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    INPUT           reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    IF              reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    WHILE           reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    ID              reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    END             reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    ENDP            reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    DWHILE          reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    ENDIF           reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    ELSE            reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    ENDW            reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)
    ENDF            reduce using rule 64 (S -> IF CONDITION AUXCOLON ST ELSE COLON AUXQ ST AUXENDIF ENDIF .)


state 184

    (41) S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .

    FOR             reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    DO              reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    GOSUB           reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    PRINT           reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    INPUT           reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    IF              reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    WHILE           reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    ID              reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    END             reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    ENDP            reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    DWHILE          reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    ENDIF           reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    ELSE            reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    ENDW            reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)
    ENDF            reduce using rule 41 (S -> INPUT PARL ID SQBL IDNUM COMMA IDNUM COMMA IDNUM SQBR PARR .)

